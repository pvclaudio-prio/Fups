import streamlit as st
import pandas as pd
from datetime import datetime, date
import yagmail
from io import BytesIO
from pathlib import Path
import plotly.express as px
import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import zipfile
import tempfile
import json
from oauth2client.client import OAuth2Credentials
import httplib2
import traceback
import openai
import json
import httpx
from sentence_transformers import SentenceTransformer, util
from openai import OpenAI
import json
import requests
import tempfile
from difflib import get_close_matches
import re

st.set_page_config(layout = 'wide')

#st.sidebar.text(f"Diret√≥rio atual: {os.getcwd()}")

caminho_csv = "followups.csv"
admin_users = ["cvieira", "amendonca", "mathayde", "bella"]

def enviar_email_gmail(destinatario, assunto, corpo_html):
    try:
        yag = yagmail.SMTP(user=st.secrets["email_user"], password=st.secrets["email_pass"])
        yag.send(to=destinatario, subject=assunto, contents=corpo_html)
        return True
    except Exception as e:
        st.error(f"Erro ao enviar e-mail: {e}")
        return False
    
def conectar_drive():
    cred_dict = st.secrets["credentials"]

    credentials = OAuth2Credentials(
        access_token=cred_dict["access_token"],
        client_id=cred_dict["client_id"],
        client_secret=cred_dict["client_secret"],
        refresh_token=cred_dict["refresh_token"],
        token_expiry=datetime.strptime(cred_dict["token_expiry"], "%Y-%m-%dT%H:%M:%SZ"),
        token_uri=cred_dict["token_uri"],
        user_agent="streamlit-app/1.0",
        revoke_uri=cred_dict["revoke_uri"]
    )

    # Atualiza token se expirado
    if credentials.access_token_expired:
        credentials.refresh(httplib2.Http())

    gauth = GoogleAuth()
    gauth.credentials = credentials
    drive = GoogleDrive(gauth)
    return drive
        
def enviar_email(destinatario, assunto, corpo_html):
    try:
        yag = yagmail.SMTP(user=st.secrets["email_user"], password=st.secrets["email_pass"])
        yag.send(to=destinatario, subject=assunto, contents=corpo_html)
        return True
    except Exception as e:
        st.error(f"Erro ao enviar e-mail: {e}")
        return False

def upload_para_drive():
    try:
        drive = conectar_drive()
        arquivo = drive.CreateFile({'title': 'followups.csv'})
        arquivo.SetContentFile(caminho_csv)
        arquivo.Upload()
        st.info("üì§ Arquivo 'followups.csv' enviado ao Google Drive com sucesso.")
    except Exception as e:
        st.warning(f"Erro ao enviar para o Drive: {e}")

def upload_evidencias_para_drive(idx, arquivos, observacao):
    try:
        drive = conectar_drive()
        pasta_principal = None

        # Procura ou cria a pasta principal "evidencias"
        lista = drive.ListFile({'q': "title='evidencias' and mimeType='application/vnd.google-apps.folder' and trashed=false"}).GetList()
        if lista:
            pasta_principal = lista[0]
        else:
            pasta_principal = drive.CreateFile({'title': 'evidencias', 'mimeType': 'application/vnd.google-apps.folder'})
            pasta_principal.Upload()

        # Cria subpasta indice_x
        subpasta_nome = f"indice_{idx}"
        subpastas = drive.ListFile({'q': f"'{pasta_principal['id']}' in parents and title='{subpasta_nome}' and mimeType='application/vnd.google-apps.folder' and trashed=false"}).GetList()
        if subpastas:
            subpasta = subpastas[0]
        else:
            subpasta = drive.CreateFile({'title': subpasta_nome, 'mimeType': 'application/vnd.google-apps.folder', 'parents': [{'id': pasta_principal['id']}]})
            subpasta.Upload()

        # Envia arquivos
        for arq in arquivos:
            arquivo_drive = drive.CreateFile({'title': arq.name, 'parents': [{'id': subpasta['id']}]})
            
            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                tmp_file.write(arq.getvalue())
                tmp_file.flush()
                arquivo_drive.SetContentFile(tmp_file.name)
                arquivo_drive.Upload()

        # Observa√ß√£o
        if observacao.strip():
            obs_file = drive.CreateFile({'title': 'observacao.txt', 'parents': [{'id': subpasta['id']}]})
            obs_file.SetContentString(observacao.strip())
            obs_file.Upload()

        st.success("‚úÖ Evid√™ncias enviadas ao Google Drive com sucesso.")
        return True
    except Exception as e:
        st.error(f"Erro ao enviar evid√™ncias para o Drive: {e}")
        return False

# --- Usu√°rios e autentica√ß√£o simples ---
users = {
    "cvieira": {"name": "Claudio Vieira", "password": "1234"},
    "auditoria": {"name": "Time Auditoria", "password": "auditoria"},
    "amendonca": {"name": "Alex Mendon√ßa", "password": "1234"},
    "mathayde": {"name": "Maria Luiza", "password": "1234"},
    "bella": {"name": "Isabella Miranda", "password": "claudio meu amor"}
}

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""

if not st.session_state.logged_in:
    st.title("üîê Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        user = users.get(username)
        if user and user["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Bem-vindo, {user['name']}!")
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

# --- Layout principal ap√≥s login ---
st.sidebar.image("PRIO_SEM_POLVO_PRIO_PANTONE_LOGOTIPO_Azul.png")
nome_usuario = users[st.session_state.username]["name"]
st.sidebar.success(f"Logado como: {nome_usuario}")
if st.sidebar.button("Logout"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.rerun()

# --- Menu lateral ---
st.sidebar.title("üìã Menu")
menu = st.sidebar.radio("Navegar para:", [
    "Dashboard",
    "Meus Follow-ups",
    "Cadastrar Follow-up",
    "Enviar Evid√™ncias",
    "Visualizar Evid√™ncias",
    "üîç Chatbot FUP"
])

# --- Conte√∫do das p√°ginas ---

if menu == "Dashboard":
    st.title("üìä Painel de KPIs")

    try:
        # Conecta ao Google Drive
        drive = conectar_drive()

        # Procura arquivo chamado 'followups.csv'
        arquivos = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()

        if not arquivos:
            st.warning("Arquivo followups.csv n√£o encontrado no Drive.")
            st.stop()

        arquivo = arquivos[0]
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivo.GetContentFile(caminho_temp)

        # Carrega CSV com pandas
        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
        df.columns = df.columns.str.strip()


        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]

        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]

        if df.empty:
            st.info("Nenhum dado dispon√≠vel para exibir KPIs.")
            st.stop()

        df["Prazo"] = pd.to_datetime(df["Prazo"])
        df["Ano"] = df["Ano"].astype(str)
        df["Status"] = df["Status"].fillna("N√£o informado")

        # --- KPIs principais ---
        total = len(df)
        concluidos = (df["Status"] == "Conclu√≠do").sum()
        pendentes = (df["Status"] == "Pendente").sum()
        andamento = (df["Status"] == "Em Andamento").sum()
        taxa_conclusao = round((concluidos / total) * 100, 1) if total > 0 else 0.0

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Total Follow-ups", total)
        col2.metric("Conclu√≠dos", concluidos)
        col3.metric("Pendentes", pendentes)
        col4.metric("Conclus√£o (%)", f"{taxa_conclusao}%")

        # --- Gr√°ficos ---
        st.subheader("üìå Distribui√ß√£o por Status")
        fig_status = px.pie(
            df,
            names="Status",
            title="Distribui√ß√£o dos Follow-ups por Status",
            hole=0.4
        )
        st.plotly_chart(fig_status, use_container_width=True)

        st.subheader("üìÅ Follow-ups por Auditoria")
        auditoria_counts = df["Auditoria"].value_counts().reset_index()
        auditoria_counts.columns = ["Auditoria", "Quantidade"]
        fig_auditoria = px.bar(
            auditoria_counts,
            x="Auditoria",
            y="Quantidade",
            title="Distribui√ß√£o de Follow-ups por Auditoria"
        )
        st.plotly_chart(fig_auditoria, use_container_width=True)

        st.subheader("üìÖ Follow-ups por Ano")
        ano_counts = df["Ano"].value_counts().sort_index().reset_index()
        ano_counts.columns = ["Ano", "Quantidade"]
        fig_ano = px.line(
            ano_counts,
            x="Ano",
            y="Quantidade",
            markers=True,
            title="Evolu√ß√£o de Follow-ups por Ano"
        )
        st.plotly_chart(fig_ano, use_container_width=True)

    except Exception as e:
        st.error(f"Erro ao acessar dados do Google Drive: {e}")

elif menu == "Meus Follow-ups":
    st.title("üìÅ Meus Follow-ups")
    st.info("Esta se√ß√£o exibir√° os follow-ups atribu√≠dos a voc√™.")

    try:
        # Conecta ao Google Drive
        drive = conectar_drive()

        # Procura arquivo chamado 'followups.csv'
        arquivos = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()

        if not arquivos:
            st.warning("Arquivo followups.csv n√£o encontrado no Google Drive.")
            st.stop()

        arquivo = arquivos[0]
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivo.GetContentFile(caminho_temp)

        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
        df.columns = df.columns.str.strip()

        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]

        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]

        df["Prazo"] = pd.to_datetime(df["Prazo"])
        df["Ano"] = df["Ano"].astype(str)

        # --- Filtros na sidebar ---
        st.sidebar.subheader("Filtros de Pesquisa")

        if st.sidebar.button("üîÑ Limpar Filtros"):
            st.rerun()

        auditorias = ["Todos"] + sorted(df["Auditoria"].dropna().unique().tolist())
        auditoria_selecionada = st.sidebar.selectbox("Auditoria", auditorias)

        status_lista = ["Todos"] + sorted(df["Status"].dropna().unique().tolist())
        status_selecionado = st.sidebar.selectbox("Status", status_lista)

        anos = ["Todos"] + sorted(df["Ano"].dropna().unique().tolist())
        ano_selecionado = st.sidebar.selectbox("Ano", anos)

        prazo_inicial, prazo_final = st.sidebar.date_input(
            "Intervalo de Prazo",
            [df["Prazo"].min().date(), df["Prazo"].max().date()]
        )

        if auditoria_selecionada != "Todos":
            df = df[df["Auditoria"] == auditoria_selecionada]

        if status_selecionado != "Todos":
            df = df[df["Status"] == status_selecionado]

        if ano_selecionado != "Todos":
            df = df[df["Ano"] == ano_selecionado]

        df = df[(df["Prazo"].dt.date >= prazo_inicial) & (df["Prazo"].dt.date <= prazo_final)]
        df = df.sort_values(by="Prazo")

        if not df.empty:
            st.dataframe(df, use_container_width=True)
            st.success(f"Total Follow Ups: {len(df)}")

            st.subheader("üõ†Ô∏è Atualizar / Excluir Follow-up por √çndice")

            indices_disponiveis = df.index.tolist()
            indice_selecionado = st.selectbox("Selecione o √≠ndice para edi√ß√£o", indices_disponiveis)

            linha = df.loc[indice_selecionado]
            st.markdown(f"""
            üîé **T√≠tulo:** {linha['Titulo']}  
            üìÖ **Prazo:** {linha['Prazo'].strftime('%d/%m/%Y')}  
            üë§ **Respons√°vel:** {linha['Responsavel']}  
            üìå **Status:** {linha['Status']}
            """)

            colunas_editaveis = [col for col in df.columns]
            coluna_escolhida = st.selectbox("Selecione a coluna para alterar", colunas_editaveis)

            valor_atual = linha[coluna_escolhida]

            if coluna_escolhida in ["Prazo", "Data de Conclus√£o"]:
                try:
                    data_inicial = pd.to_datetime(valor_atual).date()
                except:
                    data_inicial = date.today()
                novo_valor = st.date_input(f"Novo valor para '{coluna_escolhida}':", value=data_inicial)
                novo_valor_str = novo_valor.strftime("%Y-%m-%d")
            else:
                novo_valor = st.text_input(f"Valor atual de '{coluna_escolhida}':", value=str(valor_atual))
                novo_valor_str = novo_valor.strip()

            if st.button("üíæ Atualizar campo"):
                df_original = pd.read_csv(caminho_temp)
                df_original.at[indice_selecionado, coluna_escolhida] = novo_valor_str
                df_original.to_csv(caminho_csv, index=False)

                try:
                    arquivo.SetContentFile(caminho_csv)
                    arquivo.Upload()
                    st.info("üì§ Arquivo 'followups.csv' atualizado no Google Drive.")
                except Exception as e:
                    st.warning(f"Erro ao enviar para o Drive: {e}")

                st.success(f"'{coluna_escolhida}' atualizado com sucesso.")
                st.rerun()

            if usuario_logado in admin_users:
                if st.button("üóëÔ∏è Excluir este follow-up"):
                    df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
                    df.columns = df.columns.str.strip()
                    df_original = df_original.drop(index=indice_selecionado)
                    df_original.to_csv(caminho_csv, index=False)

                    try:
                        arquivo.SetContentFile(caminho_csv)
                        arquivo.Upload()
                        st.info("üì§ Arquivo 'followups.csv' atualizado no Google Drive.")
                    except Exception as e:
                        st.warning(f"Erro ao enviar para o Drive: {e}")

                    st.success("Follow-up exclu√≠do com sucesso.")
                    st.rerun()

            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='FollowUps')

            st.download_button(
                label="üì• Exportar resultados para Excel",
                data=buffer.getvalue(),
                file_name="followups_filtrados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        else:
            st.info("Nenhum follow-up encontrado com os filtros aplicados.")

    except Exception as e:
        st.error(f"Erro ao acessar dados do Google Drive: {e}")

elif menu == "Cadastrar Follow-up":
    st.title("üìù Cadastrar Follow-up")
    st.info("Aqui voc√™ poder√° cadastrar um novo follow-up.")

    with st.form("form_followup"):
        titulo = st.text_input("T√≠tulo")
        ambiente = st.text_input("Ambiente")
        ano = st.selectbox("Ano", list(range(2020, date.today().year + 2)))
        auditoria = st.text_input("Auditoria")
        risco = st.selectbox("Risco", ["Baixo", "M√©dio", "Alto"])
        plano = st.text_area("Plano de A√ß√£o")
        responsavel = st.text_input("Respons√°vel")
        usuario = st.text_input("Usu√°rio")
        email = st.text_input("E-mail do Respons√°vel")
        prazo = st.date_input("Prazo", min_value=date.today())
        data_conclusao = st.date_input("Data de Conclus√£o", value=date.today())
        status = st.selectbox("Status", ["Pendente", "Em Andamento", "Conclu√≠do"])
        avaliacao = st.selectbox("Avalia√ß√£o FUP", ["", "Satisfat√≥rio", "Insatisfat√≥rio"])
        observacao = st.text_area("Observa√ß√£o")

        submitted = st.form_submit_button("Salvar Follow-up")

    if submitted:
        novo = {
            "Titulo": titulo,
            "Ambiente": ambiente,
            "Ano": ano,
            "Auditoria": auditoria,
            "Risco": risco,
            "Plano de Acao": plano,
            "Responsavel": responsavel,
            "Usu√°rio": usuario,
            "E-mail": email,
            "Prazo": prazo.strftime("%Y-%m-%d"),
            "Data de Conclus√£o": data_conclusao.strftime("%Y-%m-%d"),
            "Status": status,
            "Avalia√ß√£o FUP": avaliacao,
            "Observa√ß√£o": observacao
        }

        try:
            # Conecta ao Google Drive e busca o followups.csv
            drive = conectar_drive()
            arquivos = drive.ListFile({
                'q': "title = 'followups.csv' and trashed=false"
            }).GetList()

            if arquivos:
                arquivo = arquivos[0]
                caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
                arquivo.GetContentFile(caminho_temp)
                df = pd.read_csv(caminho_temp)
            else:
                df = pd.DataFrame()
                arquivo = drive.CreateFile({'title': 'followups.csv'})

            # Atualiza e salva
            df = pd.concat([df, pd.DataFrame([novo])], ignore_index=True)
            df.to_csv(caminho_csv, index=False)

            arquivo.SetContentFile(caminho_csv)
            arquivo.Upload()

            st.success("‚úÖ Follow-up salvo e sincronizado com o Google Drive!")

            corpo = f"""
            <p>Ol√° <b>{responsavel}</b>,</p>
            <p>Um novo follow-up foi atribu√≠do a voc√™:</p>
            <ul>
                <li><b>T√≠tulo:</b> {titulo}</li>
                <li><b>Auditoria:</b> {auditoria}</li>
                <li><b>Prazo:</b> {prazo.strftime('%d/%m/%Y')}</li>
                <li><b>Status:</b> {status}</li>
            </ul>
            <p>Acesse o aplicativo para incluir evid√™ncias e acompanhar o andamento:</p>
            <p><a href='https://fup-auditoria.streamlit.app/' target='_blank'>üîó fup-auditoria.streamlit.app</a></p>
            <br>
            <p>Atenciosamente,<br>Auditoria Interna</p>
            """

            if email:
                sucesso_envio = enviar_email_gmail(
                    destinatario=email,
                    assunto=f"[Follow-up] Nova Atribui√ß√£o: {titulo}",
                    corpo_html=corpo
                )
                if sucesso_envio:
                    st.success("üìß E-mail de notifica√ß√£o enviado com sucesso!")

        except Exception as e:
            st.error(f"Erro ao cadastrar follow-up: {e}")

elif menu == "Enviar Evid√™ncias":
    st.title("üìå Enviar Evid√™ncias")
    st.info("Aqui voc√™ poder√° enviar comprovantes e observa√ß√µes para follow-ups.")

    try:
        # üîÑ Puxa o arquivo mais recente do Drive
        drive = conectar_drive()
        arquivos_drive = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()

        if not arquivos_drive:
            st.warning("Arquivo followups.csv n√£o encontrado no Google Drive.")
            st.stop()

        arquivo_drive = arquivos_drive[0]
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivo_drive.GetContentFile(caminho_temp)
        df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
        df.columns = df.columns.str.strip()

        usuario_logado = st.session_state.username
        nome_usuario = users[usuario_logado]["name"]

        if usuario_logado not in admin_users:
            df = df[df["Responsavel"].str.lower() == nome_usuario.lower()]

        if df.empty:
            st.info("Nenhum follow-up dispon√≠vel para envio de evid√™ncia.")
            st.stop()

        idx = st.selectbox("Selecione o √≠ndice do follow-up:", df.index.tolist())
        linha = df.loc[idx]

        st.markdown(f"""
        üîé **T√≠tulo:** {linha['Titulo']}  
        üìÖ **Prazo:** {linha['Prazo']}  
        üë§ **Respons√°vel:** {linha['Responsavel']}  
        üìù **Plano de A√ß√£o:** {linha['Plano de Acao']}
        """)

        arquivos = st.file_uploader(
            "Anexe arquivos de evid√™ncia",
            type=["pdf", "png", "jpg", "jpeg", "zip"],
            accept_multiple_files=True
        )
        observacao = st.text_area("Observa√ß√µes (opcional)")

        submitted = st.button("üì® Enviar Evid√™ncia")
        if submitted:
            if not arquivos:
                st.warning("Voc√™ precisa anexar pelo menos um arquivo.")
                st.stop()

            # Upload direto para o Google Drive
            sucesso_upload = upload_evidencias_para_drive(idx, arquivos, observacao)

            # Registro em log (local)
            if sucesso_upload:
                try:
                    log_path = Path("log_evidencias.csv")
                    log_data = {
                        "indice": idx,
                        "titulo": linha["Titulo"],
                        "responsavel": linha["Responsavel"],
                        "arquivos": "; ".join([arq.name for arq in arquivos]),
                        "observacao": observacao,
                        "data_envio": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "enviado_por": nome_usuario,
                    }
                    log_df = pd.DataFrame([log_data])
                    if log_path.exists():
                        log_df.to_csv(log_path, mode="a", header=False, index=False)
                    else:
                        log_df.to_csv(log_path, index=False)
                    st.success("‚úÖ Registro salvo no log local.")
                except Exception as e:
                    st.error(f"Erro ao salvar log local: {e}")

                # Enviar e-mail de notifica√ß√£o
                corpo = f"""
                <p>üïµÔ∏è Evid√™ncia enviada para o follow-up:</p>
                <ul>
                    <li><b>√çndice:</b> {idx}</li>
                    <li><b>T√≠tulo:</b> {linha['Titulo']}</li>
                    <li><b>Respons√°vel:</b> {linha['Responsavel']}</li>
                    <li><b>Arquivos:</b> {"; ".join([arq.name for arq in arquivos])}</li>
                    <li><b>Data:</b> {datetime.now().strftime("%d/%m/%Y %H:%M")}</li>
                </ul>
                <p>Evid√™ncias armazenadas no Google Drive (pasta: <b>evidencias/indice_{idx}</b>).</p>
                """

                sucesso_envio = enviar_email(
                    destinatario="cvieira@prio3.com.br",
                    assunto=f"[Evid√™ncia] Follow-up #{idx} - {linha['Titulo']}",
                    corpo_html=corpo
                )
                if sucesso_envio:
                    st.success("üìß Notifica√ß√£o enviada ao time de auditoria!")

    except Exception as e:
        st.error(f"Erro ao carregar dados do Google Drive: {e}")

elif menu == "Visualizar Evid√™ncias":

    st.title("üìÇ Visualiza√ß√£o de Evid√™ncias - Google Drive")

    try:
        drive = conectar_drive()

        # Pasta "evidencias"
        pasta_principal = drive.ListFile({
            'q': "title='evidencias' and mimeType='application/vnd.google-apps.folder' and trashed=false"
        }).GetList()

        if not pasta_principal:
            st.warning("Nenhuma pasta de evid√™ncias encontrada.")
            st.stop()

        pasta_id = pasta_principal[0]['id']

        # Subpastas tipo indice_1, indice_2...
        subpastas = drive.ListFile({
            'q': f"'{pasta_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
        }).GetList()

        if not subpastas:
            st.info("Nenhuma evid√™ncia dispon√≠vel.")
            st.stop()

        # Cria dicion√°rio com chaves como "1", "2", etc.
        opcoes = {
            p['title'].split('_')[1]: {'id': p['id'], 'obj': p}
            for p in subpastas if p['title'].startswith('indice_') and '_' in p['title']
        }

        if not opcoes:
            st.warning("Nenhuma subpasta v√°lida encontrada no Google Drive.")
            st.stop()

        indices_disponiveis = sorted(opcoes.keys(), key=int)
        indice_escolhido = st.selectbox("Selecione o √≠ndice do follow-up:", indices_disponiveis)

        if indice_escolhido not in opcoes:
            st.error(f"√çndice '{indice_escolhido}' n√£o encontrado.")
            st.stop()

        pasta_selecionada_id = opcoes[indice_escolhido]['id']
        pasta_obj = opcoes[indice_escolhido]['obj']

        st.subheader(f"üìÅ Evid√™ncias para Follow-up #{indice_escolhido}")

        arquivos = drive.ListFile({
            'q': f"'{pasta_selecionada_id}' in parents and trashed=false"
        }).GetList()

        if not arquivos:
            st.info("Nenhum arquivo nesta pasta.")
            st.stop()

        buffer_zip = BytesIO()
        with zipfile.ZipFile(buffer_zip, "w") as zipf:
            for arq in arquivos:
                nome = arq['title']
                if nome.lower() == "observacao.txt":
                    conteudo = arq.GetContentString()
                    st.markdown("**üìù Observa√ß√£o:**")
                    st.info(conteudo)
                    zipf.writestr(nome, conteudo)
                else:
                    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                        arq.GetContentFile(tmp_file.name)
                        tmp_file.seek(0)
                        zipf.write(tmp_file.name, arcname=nome)
                        link = arq['alternateLink']
                        st.markdown(f"üìé [{nome}]({link})", unsafe_allow_html=True)

        buffer_zip.seek(0)
        st.download_button(
            label="üì¶ Baixar todos como .zip",
            data=buffer_zip,
            file_name=f"evidencias_indice_{indice_escolhido}.zip",
            mime="application/zip"
        )

        # Bot√£o de exclus√£o (somente admin)
        if st.session_state.username in admin_users:
            if st.button("üóëÔ∏è Excluir todas as evid√™ncias deste √≠ndice"):
                try:
                    pasta_obj.Delete()
                    st.success(f"Evid√™ncias do √≠ndice {indice_escolhido} exclu√≠das com sucesso.")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erro ao excluir evid√™ncias: {e}")

    except Exception as e:
        st.error("Erro ao acessar evid√™ncias no Google Drive.")
        st.code(traceback.format_exc())

elif menu == "üîç Chatbot FUP":

    st.title("ü§ñ Chatbot FUP com Pergunta Livre")

    @st.cache_data
    def carregar_followups():
        drive = conectar_drive()
        arquivos = drive.ListFile({
            'q': "title = 'followups.csv' and trashed=false"
        }).GetList()
        if not arquivos:
            return pd.DataFrame()
        caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
        arquivos[0].GetContentFile(caminho_temp)
        return pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")

    df = carregar_followups()
    if df.empty:
        st.warning("Nenhum dado dispon√≠vel.")
        st.stop()

    st.markdown("### üìù Digite sua pergunta sobre os follow-ups:")
    pergunta = st.text_input("Ex: Quais follow-ups em andamento no ambiente SAP em 2024?", key="pergunta_fup")
    enviar = st.button("üì® Enviar")

    if enviar:
        st.write("‚úÖ Chat encaminhado para o agente!")

        if pergunta and isinstance(pergunta, str):
            prompt_chat = pergunta.strip().lower()
            st.write("‚úÖ Chat recebido:", prompt_chat)
        else:
            st.error("‚ùå Nenhuma pergunta v√°lida recebida.")
            st.stop()

        API_KEY = st.secrets["openai"]["api_key"]
        filtros = {}

        st.write("üîç Analisando valores semelhantes nas colunas...")

        # Pr√©-processa valores √∫nicos das colunas textuais
        valores_unicos = {}
        for col in df.select_dtypes(include="object").columns:
            valores_unicos[col] = df[col].astype(str).str.lower().str.strip().unique().tolist()

        # Tokeniza o prompt
        tokens = re.findall(r"\w+", prompt_chat)

        melhor_match = None
        melhor_coluna = None

        for token in tokens:
            for col, valores in valores_unicos.items():
                match = get_close_matches(token, valores, n=1, cutoff=0.8)
                if match:
                    melhor_match = match[0]
                    melhor_coluna = col
                    break
            if melhor_match:
                break

        if melhor_match and melhor_coluna:
            filtros[melhor_coluna] = melhor_match
            st.write(f"üìå Valor interpretado: `{melhor_match}` na coluna `{melhor_coluna}`")
        else:
            st.warning("‚ö†Ô∏è Nenhuma coluna textual cont√©m esse valor.")

        # Extrair ano
        ano_match = re.search(r"(\d{4})", prompt_chat)
        if ano_match:
            filtros["Ano"] = ano_match.group(1)
            st.write("üìÖ Ano identificado:", filtros["Ano"])

        # üìä Aplicar filtros
        if filtros:
            df_filtrado = df.copy()
            for col in df_filtrado.select_dtypes(include="object").columns:
                df_filtrado[col] = df_filtrado[col].astype(str).str.lower().str.strip()

            for k, v in filtros.items():
                if k in df_filtrado.columns:
                    df_filtrado[k] = df_filtrado[k].astype(str)
                    df_filtrado = df_filtrado[df_filtrado[k].str.contains(str(v).lower().strip(), na=False)]

            if not df_filtrado.empty:
                try:
                    dados_markdown = df_filtrado.fillna("").astype(str).to_markdown(index=False)
                except ImportError:
                    st.warning("‚ö†Ô∏è Instale `tabulate` para melhor formata√ß√£o: `pip install tabulate`")
                    dados_markdown = df_filtrado.fillna("").astype(str).to_csv(index=False, sep=";")
            else:
                dados_markdown = "‚ùå Nenhum follow-up encontrado com os crit√©rios especificados."
        else:
            try:
                dados_markdown = df.fillna("").astype(str).to_markdown(index=False)
            except ImportError:
                st.warning("‚ö†Ô∏è Instale `tabulate` para melhor formata√ß√£o: `pip install tabulate`")
                dados_markdown = df.fillna("").astype(str).to_csv(index=False, sep=";")

        # üß† Prompt para an√°lise
        system_prompt = f"""
Voc√™ √© um assistente de auditoria interna.

Sua tarefa √© responder perguntas com base nos follow-ups abaixo, de forma clara, objetiva e profissional.

Base de dados:
{dados_markdown}
"""

        payload = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt_chat}
            ],
            "temperature": 0.2,
            "max_tokens": 500
        }

        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }

        resposta_final = "‚ùå Nenhuma resposta gerada."
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload,
            verify=False
        )

        if response.status_code == 200:
            resposta_final = response.json()["choices"][0]["message"]["content"]
        else:
            resposta_final = f"Erro na API: {response.status_code} - {response.text}"

        # üîÅ Revisor
        revisor_prompt = f"""
Voc√™ √© um revisor t√©cnico. Reescreva a resposta com:
- Clareza
- Estrutura objetiva
- Corre√ß√£o gramatical
- Sem repeti√ß√µes

Base de dados:
{dados_markdown}
"""

        payload_revisor = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": revisor_prompt},
                {"role": "user", "content": resposta_final}
            ],
            "temperature": 0.2,
            "max_tokens": 500
        }

        response_revisor = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload_revisor,
            verify=False
        )

        if response_revisor.status_code == 200:
            resposta_final = response_revisor.json()["choices"][0]["message"]["content"]
        else:
            resposta_final = f"(Erro ao revisar resposta: {response_revisor.status_code})\n\n{resposta_final}"

        # üí¨ Exibir resposta e base
        st.markdown("### üí¨ Resposta do Assistente")
        st.write(resposta_final)

        st.markdown("### üìã Follow-ups encontrados:")
        if 'df_filtrado' in locals() and not df_filtrado.empty:
            st.dataframe(df_filtrado, use_container_width=True)
        else:
            st.info("Nenhum follow-up encontrado com os crit√©rios aplicados.")
